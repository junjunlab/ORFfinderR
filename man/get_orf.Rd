% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_orf.R
\name{get_orf}
\alias{get_orf}
\title{Get Open Reading Frames (ORFs) from a DNA sequence}
\usage{
get_orf(
  sequence = NULL,
  translation_table = 1,
  minimum_length = 75,
  start_codons = c("ATG"),
  stop_codons = c("TAA", "TAG", "TGA"),
  remove_nested = FALSE,
  trim_trailing = FALSE,
  output_file = NULL,
  pythonPath = NULL
)
}
\arguments{
\item{sequence}{\code{character}. The input DNA sequence as a string. Default is \code{NULL}.}

\item{translation_table}{\code{integer}. Genetic code translation table ID. Default is \code{1} (Standard genetic code).}

\item{minimum_length}{\code{integer}. Minimum ORF length in base pairs (bp). Default is \code{75}.}

\item{start_codons}{\verb{character vector}. Start codons used to identify ORF initiation points. Default is \code{c("ATG")}.}

\item{stop_codons}{\verb{character vector}. Stop codons used to identify ORF termination points. Default is \code{c("TAA", "TAG", "TGA")}.}

\item{remove_nested}{\code{logical}. If \code{TRUE}, nested ORFs (those fully contained within a larger ORF) will be removed. Default is \code{FALSE}.}

\item{trim_trailing}{\code{logical}. If \code{TRUE}, trims trailing sequences at the ORF boundaries for incomplete codons. Default is \code{FALSE}.}

\item{output_file}{The output file name.}

\item{pythonPath}{Python path.}
}
\value{
A data frame.
}
\description{
This function identifies potential open reading frames (ORFs) within a given DNA sequence
based on specified start and stop codons. Optionally, it can filter out nested ORFs and/or
trim trailing sequences.
}
\details{
The function uses the Python Biopython package (via the \code{reticulate} package) to carry out the ORF finding
and protein translation. If Python or the required Biopython package is not available on the system, the function
attempts to install Biopython automatically. The function works by running a Python script (\code{orf_finder.py})
which looks for potential ORFs in the given input sequence.
}
